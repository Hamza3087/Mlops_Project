name: CI Pipeline - Dev to Testing

# Ensure the workflow has write permissions
permissions:
  contents: write
  pull-requests: write
  security-events: write  # Required for CodeQL to upload results

on:
  push:
    branches:
      - dev

jobs:
  test-build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.MLPROJECT }}
        fetch-depth: 0  # Fetch all history for all branches

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest

    - name: Run Unit Tests
      run: pytest tests/test_main.py

    
    # # Log in to DockerHub
    # - name: Log in to DockerHub
    #   uses: docker/login-action@v2
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}

    # - name: Build and Push Backend Docker Image
    #   run: |
    #     docker build -t hamza0707/mbackend:latest -f Dockerfile .
    #     docker push hamza0707/mbackend:latest

    # - name: Build and Push Frontend Docker Image
    #   run: |
    #     docker build -t hamza0707/mfrontend:latest -f my-app/Dockerfile my-app/
    #     docker push hamza0707/mfrontend:latest

    # # Install Docker Compose
    # - name: Install Docker Compose
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y docker-compose

    # - name: Run Docker Compose
    #   run: |
    #     docker-compose -f dockercompose.yml up -d
    #   env:
    #     DATABASE_URL: sqlite:///./test.db  # Pass environment variables if needed

  push-to-testing:
    needs: test-build-deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.MLPROJECT }}
        fetch-depth: 0  # Ensure full history is fetched

    - name: Set up Git
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"

    - name: Merge dev to testing
      env:
        GITHUB_TOKEN: ${{ secrets.MLPROJECT }}
      run: |
        # Ensure both dev and testing branches exist
        git fetch origin dev:dev
        git fetch origin testing:testing || git branch testing origin/dev

        # Checkout testing branch
        git checkout testing

        # Merge dev into testing
        git merge origin/dev -m "Merge dev into testing"

        # Push merged changes
        git push origin testing